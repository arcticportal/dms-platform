version: "3.9"

services:
    # =================POSTGIS=SERVICE======================
    postgres:
        container_name: postgres
        env_file:
            - .env
        image: kartoza/postgis:14-3.1
        networks:
            - dms-network
        ports:
            - "5432:5432"
        restart: on-failure
        environment:
            - POSTGRES_DB=${DATABASE_NAME}
            - POSTGRES_USER=${DATABASE_USERNAME}
            - POSTGRES_PASS=${DATABASE_PASSWORD}
            - ALLOW_IP_RANGE=0.0.0.0/0
            - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
        healthcheck:
            test: "exit 0"
        # healthcheck:
        #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        #     interval: 5s
        #     timeout: 5s
        #     retries: 5
        volumes:
            - postgis-data:/var/lib/postgresql
            - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    # =================REDIS=CACHING=======================
    redis:
        image: redis:6-alpine
        container_name: redis
        networks:
            - dms-network

    # =================DJANGO=SERVICE======================
    dms-backend:
        build:
            context: dms-backend
            dockerfile: Dockerfile
        container_name: backend
        depends_on:
            redis:
                condition: service_started
            postgres:
                condition: service_healthy
        env_file:
            - .env
        networks:
            - dms-network
        ports:
            - "8000:8000" # webserver 
            - "8888:8888" # jupyter notebook
        user: ${USER_PYTHON}
        volumes:
            - ./dms-backend:${DIR_PYTHON}
            - ./dms-jupyter:${DIR_PYTHON}/dms-jupyter/
            - media_volume:${DIR_PYTHON}/media
            - static_volume:${DIR_PYTHON}/staticfiles

    # =================CELERY=SERVICE=======================

    celery:
        build:
            context: dms-backend
            dockerfile: Dockerfile
        container_name: celery
        depends_on:
            - dms-backend
            - redis
        command: celery -A dms worker --beat -S django.celery -l INFO
        env_file:
            - .env
        environment:
            DEBUG: ${DEBUG}
            DJANGO_ALLOWED_HOSTS: ${ALLOWED_HOSTS}
            CELERY_BROKER: ${CELERY_BROKER}
            CELERY_BACKEND: ${CELERY_BACKEND}
            SECRET_KEY: ${SECRET_KEY}
            BASE_URL: ${BASE_URL}
        volumes:
            - ./dms-backend:${DIR_PYTHON}
        networks:
            - dms-network

    # =================FRONTEND=REACT=APP=======================
    # For hot reload to work need to bind same port on host and
    # docker image for websockets to work correctly

    dms-frontend:
        build:
            context: dms-frontend
            dockerfile: Dockerfile
        environment:
            - CHOKIDAR_USEPOLLING=true
        stdin_open: true
        tty: true
        command: npm start
        container_name: frontend
        depends_on:
            - dms-backend
        env_file:
            - .env
        ports:
            - "3000:3000"
        networks:
            - dms-network
        user: ${USER_NODE}
        volumes:
            - ./dms-frontend:${DIR_NODE}
            - '${DIR_NODE}/node_modules'

    # =================NEW=FRONTEND=======================
    # For hot reload to work need to bind same port on host and
    # docker image for websockets to work correctly


    # dms-frontend-new:
    #     build:
    #         context: dms-frontend-new
    #         dockerfile: Dockerfile
    #     environment:
    #         - CHOKIDAR_USEPOLLING=true
    #     stdin_open: true
    #     tty: true
    #     command: pnpm run dev
    #     container_name: frontend-ts
    #     depends_on:
    #         - dms-backend
    #     env_file:
    #         - .env
    #     ports:
    #         - "3000:3000"
    #     networks:
    #         - dms-network
    #     user: ${USER_NODE}
    #     volumes:
    #         - ./dms-frontend-new:${DIR_NODE}
    #         - ${DIR_NODE}/node_modules

    # =================NGINX=SERVICE=======================
    platform-nginx:
        container_name: nginx
        depends_on:
            dms-backend:
                condition: service_started
        env_file:
            - .env
        image: nginx:alpine
        networks:
            - dms-network
        ports:
            - "80:80"
        restart: always
        # volumes:
        # - media_volume:${DIR_NGINX}/media
        # - static_volume:${DIR_NGINX}/staticfiles

        # =========NETWORKS===========
networks:
    dms-network:
        driver: bridge

# =========VOLUMES============
volumes:
    static_volume: null
    media_volume: null
    postgis-data: null
